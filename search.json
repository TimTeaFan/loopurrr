[{"path":"https://timteafan.github.io/loopurrr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Tim Tiefenbach Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://timteafan.github.io/loopurrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Tiefenbach. Author, maintainer.","code":""},{"path":"https://timteafan.github.io/loopurrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tiefenbach T (2022). loopurrr: Tranlate purrr iterator functions regular loops. R package version 0.1.0.9000.","code":"@Manual{,   title = {loopurrr: Tranlate purrr iterator functions to regular for loops},   author = {Tim Tiefenbach},   year = {2022},   note = {R package version 0.1.0.9000}, }"},{"path":[]},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tranlate purrr iterator functions to regular for loops","text":"{loopurrr} makes purrr’s iterator functions understandable easier debug. initial version, {loopurrr} consists one main function: as_loop(). as_loop() takes function call one purrr’s iterator functions, purrr::map(), translates regular loop. might ask: “anyone want ?!” as_loop() least three use cases: Learning Teaching Functional Programming Debugging Accessing Extending purrr Functions remainder readme expand uses cases , show get started, give brief outlook development roadmap.","code":""},{"path":[]},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"1-learning-and-teaching-functional-programming","dir":"","previous_headings":"Motivation and Use Cases","what":"1. Learning and Teaching Functional Programming","title":"Tranlate purrr iterator functions to regular for loops","text":"Beginners, especially users new functional-style programming, often hard time getting head around R’s rather opaque iterator functions, base R’s lapply() purrr::map(). loops, hand, fairly well understood, even users new R. as_loop() translates function call one purrr’s iterator functions regular loop. as_loop() shows purrr’s iterator functions work hood. reading iterator functions (example ), LearneRs can start playing around calling as_loop() examples purrr documentation. TeacheRs, hand, can use as_loop() interactively introducing different types iterator functions purrr package. Finally, package beginners users new R. writing package fairly confident understanding purrr’s iterator functions. Nevertheless, translating loop quite revealing, especially complex functions, purrr::reduce() (specifically direction set \"backward\").","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"2-debugging","dir":"","previous_headings":"Motivation and Use Cases","what":"2. Debugging","title":"Tranlate purrr iterator functions to regular for loops","text":"learneRs know iterator function use , next hurdle take dealing failure. Iterator functions introduce additional layer complexity, special knowledge required debug non-running code (see also ). translating iterator function regular loop, as_loop() can help debugging. Usually loop run index, example . executed global environment, useRs can easily inspect code console index code throws error - without special knowledge use debugger, browser() purrr::safely(). course, useRs still highly encouraged learn use R’s purrr’s debugging tools functions. However, data science teams different levels programming knowledge, possibility translate complex iterator functions regular loops can help mitigate temporary knowledge gaps.","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"3-accessing-and-extending-purrr-functions","dir":"","previous_headings":"Motivation and Use Cases","what":"3. Accessing and Extending {purrr} Functions","title":"Tranlate purrr iterator functions to regular for loops","text":"getting used purrr’s functions, easily come mind, dealing iteration problems. However, sometimes purrr package available, example production environment new packages easily installed, writing package doesn’t depend purrr. Although base R equivalents exist purrr’s major functions, functions like purrr::imap() purrr::reduce2() available base R need constructed. cases, as_loop() provides ready--use alternative. , translating purrr’s iterator functions loops, underlying building blocks can easily rearranged create functions included purrr package. example, translating call purrr::imap() call purrr::map2() easily build loop loops two vectors index, function like imap2() existed.","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tranlate purrr iterator functions to regular for loops","text":"{loopurrr} CRAN yet. can install latest version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"TimTeaFan/loopurrr\")"},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Tranlate purrr iterator functions to regular for loops","text":"First, lets use get_supported_fns(\"as_loop\") get glimpse iterator functions purrr package currently supported as_loop(): Now can look documentation purrr start translating first example purrr::map(). First, lets look result: Next, lets pipe function call as_loop(). Depending automatically detected output settings, result either directly inserted original R script console, given code run RStudio {rstudioapi} package installed, copied clipboard, given conditions met {clipr} package installed, none conditions met, result just printed console. see result need print :","code":"#> $map #>  [1] \"map\"     \"map_at\"  \"map_chr\" \"map_dbl\" \"map_df\"  \"map_dfc\" \"map_dfr\" #>  [8] \"map_if\"  \"map_int\" \"map_lgl\" \"map_raw\" #>  #> $imap #> [1] \"imap\"     \"imap_chr\" \"imap_dbl\" \"imap_dfc\" \"imap_dfr\" \"imap_int\" \"imap_lgl\" #> [8] \"imap_raw\" #>  #> $map #> [1] \"map2\"     \"map2_chr\" \"map2_dbl\" \"map2_df\"  \"map2_dfc\" \"map2_dfr\" \"map2_int\" #> [8] \"map2_lgl\" \"map2_raw\" #>  #> $pmap #> [1] \"pmap\"     \"pmap_chr\" \"pmap_dbl\" \"pmap_df\"  \"pmap_dfc\" \"pmap_dfr\" \"pmap_int\" #> [8] \"pmap_lgl\" \"pmap_raw\" #>  #> $lmap #> [1] \"lmap\"    \"lmap_at\" #>  #> $modify #> [1] \"modify\"    \"modify_at\" \"modify_if\" \"modify2\"   \"imodify\"   #>  #> $walk #> [1] \"iwalk\" \"pwalk\" \"walk\"  \"walk2\" #>  #> $accumulate #> [1] \"accumulate\"  \"accumulate2\" #>  #> $reduce #> [1] \"reduce\"  \"reduce2\" 1:3 %>% purrr::map(rnorm, n = 10) #> [[1]] #>  [1]  2.2774409  0.8047915 -1.1760346 -1.0427843  2.7379321  1.2038944 #>  [7]  0.7700466  2.4655117  0.5696917  1.3623644 #>  #> [[2]] #>  [1] 3.4517462 3.1873055 1.1531178 2.6154024 3.1894336 1.1906326 0.7301067 #>  [8] 1.4232494 0.6573112 3.3227052 #>  #> [[3]] #>  [1] 3.194374 2.140866 2.717488 1.839687 2.601345 3.707104 1.350024 3.608649 #>  [9] 4.441465 3.918482 1:3 %>%   purrr::map(rnorm, n = 10) %>%   as_loop() # --- convert: `map(1:3, rnorm, n = 10)` as loop --- # .inp1 <- 1:3 out <- vector(\"list\", length = length(.inp1))  for (i in seq_along(.inp1)) {   out[[i]] <- rnorm(.inp1[[i]], n = 10) } # --- end loop --- # out #> [[1]] #>  [1] -0.7200126  1.7311830  2.2690621 -0.2107278  2.4543609  2.3500439 #>  [7]  2.2721887  1.0647378  0.4952374  1.7298569 #>  #> [[2]] #>  [1] 1.3039634 2.7448869 1.2602083 2.9542130 3.2978170 0.7099589 3.2346049 #>  [8] 2.2093101 0.7843484 1.2772277 #>  #> [[3]] #>  [1] 1.8397364 3.7574153 0.8742848 2.4375385 4.6123190 1.3133069 1.8128238 #>  [8] 2.7940326 3.5215455 4.5140684"},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"roadmap-and-collaboration","dir":"","previous_headings":"","what":"Roadmap and Collaboration","title":"Tranlate purrr iterator functions to regular for loops","text":"future versions {loopurrr} following milestones planned: release {loopurrr} CRAN enable support iterator functions purrr (e.g. cross() etc.) support base R’s apply family as_loop() translate purrr’s iterators base R equivalents as_base() (yet created) anyone interested collaborating one milestones, help appreciated! Feel free reach , example Twitter @TimTeaFan.","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"history","dir":"","previous_headings":"","what":"History","title":"Tranlate purrr iterator functions to regular for loops","text":"idea package based experience work. diving deeper purrr’s iterator functions started refactoring old code replacing loops map functions. surprise, although code much cleaner now, everybody liked . users made things harder understand. Learning map functions work, enough solve , since things got complicated code throwing errors. {loopurrr} allows us write clean code translate regular loops needed.","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tranlate purrr iterator functions to regular for loops","text":"Credit goes creators maintainers amazing purrr package!{loopurrr} just add-exist without . , credit goes {gradethis} package adapted code make as_loop() work piped expressions (function calls). {gradethis} license copyrights apply! inpsired Miles McBain’s {datapasta}’s different output options. Looking code alone wasn’t enough, also got help StackOverflow user @Waldi make {rstudioapi} package work. Finally, adapted answer StackOverflow replace function arguments functions map(.f = ) actual objects used.","code":""},{"path":"https://timteafan.github.io/loopurrr/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Tranlate purrr iterator functions to regular for loops","text":"package promote loops iterator functions. Rather opposite true. love purrr package happy people use . Although package contains tests 1000 lines code, definitely number edge cases won’t work correctly. find one, ’d happy file issue .","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate purrr's iterator functions to regular for loops — as_loop","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":"as_loop() takes function call one {purrr}'s iterator functions, purrr::map(), translates regular loop. Depending output context, translation either () printed console, (ii) copied clipboard (iii) directly inserted RStudio. Note latter two options require {clipr} respectively {rstudioapi} package installed. usage pretty straight-forward: Just wrap call {purrr} iterator function as_loop() us one pipe operators (|> %>%) pipe function call as_loop(). details see examples .","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":"","code":"as_loop(   .expr,   simplify = TRUE,   output_nm = \"out\",   idx = \"i\",   output_context = default_context(),   return = c(\"string\", \"eval\") )"},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":".expr function call {purrr} iterator function. See \"Supported functions\" section overview {purrr} iterator functions currently supported. simplify TRUE, default, as_loop() run function call .expr check two things: (1) Whether call valid. , error thrown, pointing underlying function call invalid. (2) Whether resulting return value contains NULL. case loop needs verbose. simplify set FALSE function call .expr checked errors resulting loop verbose even NULL among return values. recommended set simplify FALSE calculation-heavy function calls. output_nm sets name resulting output object. default name . idx sets name index loop. default index . output_context optional output context defines output target. Possible values one several : \"rstudio\": insert translation location as_loop() run. run within R script, loop inserted , otherwise console. Note {rstudioapi} package required option. \"clipboard\": copy loop translation clipboard. Note {clipr} package required option. \"console\": print call console using cat(). default setting call default_context(). function first looks \"loopurrr.output\" option. option specified, default c(\"rstudio\", \"clipboard\", \"console\"). case as_loop() run output options left right (starting \"rstudio\") successful. neither rstudioapi package clipr package installed, output context fall back \"console\". return set \"string\", default, as_loop() return translated code character strings location specified output_context. set \"eval\", translated code evaluated dedicated environment output object returned. option especially testing whether as_loop() works expected. irrelevant users.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":"Depending return argument return value : output = \"string\": NULL. side-effect, translated loop returned specified output context. output = \"eval\": Usually return value output object constructed loop. case call walk, walk2 etc. (first) input object returned.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":"supported-functions","dir":"Reference","previous_headings":"","what":"Supported functions","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":"following iterator functions {purrr} package currently supported:","code":"options(width = 60) get_supported_fns(\"as_loop\") #> $map #>  [1] \"map\"     \"map_at\"  \"map_chr\" \"map_dbl\" \"map_df\"  #>  [6] \"map_dfc\" \"map_dfr\" \"map_if\"  \"map_int\" \"map_lgl\" #> [11] \"map_raw\" #>  #> $imap #> [1] \"imap\"     \"imap_chr\" \"imap_dbl\" \"imap_dfc\" \"imap_dfr\" #> [6] \"imap_int\" \"imap_lgl\" \"imap_raw\" #>  #> $map #> [1] \"map2\"     \"map2_chr\" \"map2_dbl\" \"map2_df\"  \"map2_dfc\" #> [6] \"map2_dfr\" \"map2_int\" \"map2_lgl\" \"map2_raw\" #>  #> $pmap #> [1] \"pmap\"     \"pmap_chr\" \"pmap_dbl\" \"pmap_df\"  \"pmap_dfc\" #> [6] \"pmap_dfr\" \"pmap_int\" \"pmap_lgl\" \"pmap_raw\" #>  #> $lmap #> [1] \"lmap\"    \"lmap_at\" #>  #> $modify #> [1] \"modify\"    \"modify_at\" \"modify_if\" \"modify2\"   #> [5] \"imodify\"   #>  #> $walk #> [1] \"iwalk\" \"pwalk\" \"walk\"  \"walk2\" #>  #> $accumulate #> [1] \"accumulate\"  \"accumulate2\" #>  #> $reduce #> [1] \"reduce\"  \"reduce2\""},{"path":"https://timteafan.github.io/loopurrr/reference/as_loop.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate purrr's iterator functions to regular for loops — as_loop","text":"wrap pipe call purrr::map() as_loop() translated regular loop. Depending output context, resulting loop either () inserted directly script RStudio, (ii) copied clipboard (iii) printed console.  output_nm argument lets us specify name resulting output object. example \".res\". idx argument lets us specify index used. example \"j\".  simplify set FALSE as_loop neither check validity underlying call expected output. case resulting loop verbose. need take case NULL return values account. example see happens, use unnamed object, 1:3, call purrr::map(). as_loop() assign unnamed objects internal name. example .inp1.","code":"x <- list(1, c(1:2), c(1:3)) as_loop(map(x, sum))        # wrap a call in `as_loop()` map(1:3, sum) %>% as_loop() # pipe a call into `as_loop()`  # --- convert: `map(x, sum)` as loop --- # out <- vector(\"list\", length = length(x))  for (i in seq_along(x)) {   out[[i]] <- sum(x[[i]]) } # --- end loop --- #  # --- end loop --- # x <- list(1, c(1:2), c(1:3)) map_dbl(x, sum) %>%   as_loop(., output_nm = \".res\", idx = \"j\")  # --- convert: `map_dbl(x, sum)` as loop --- # .res <- vector(\"double\", length = length(x))  for (j in seq_along(x)) {   .res[[j]] <- sum(x[[j]]) } # --- end loop --- # map(1:3, sum) %>% as_loop(., simplify = FALSE)  # --- convert: `map(1:3, sum)` as loop --- # .inp1 <- 1:3 out <- vector(\"list\", length = length(.inp1))  for (i in seq_along(.inp1)) {   .tmp <- sum(.inp1[[i]])   if (!is.null(.tmp))     out[[i]] <- .tmp } # --- end loop --- #"},{"path":"https://timteafan.github.io/loopurrr/reference/get_supported_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a list of supported function names — get_supported_fns","title":"Show a list of supported function names — get_supported_fns","text":"get_supported_fns() shows functions supported specific {loopurrr} function. Currently, works as_loop().","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/get_supported_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a list of supported function names — get_supported_fns","text":"","code":"get_supported_fns(fn)"},{"path":"https://timteafan.github.io/loopurrr/reference/get_supported_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a list of supported function names — get_supported_fns","text":"fn name {loopurrr} function string.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/get_supported_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a list of supported function names — get_supported_fns","text":"list supported function names named character vectors.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/get_supported_fns.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a list of supported function names — get_supported_fns","text":"","code":"options(width = 60) get_supported_fns(\"as_loop\") #> $map #>  [1] \"map\"     \"map_at\"  \"map_chr\" \"map_dbl\" \"map_df\"  #>  [6] \"map_dfc\" \"map_dfr\" \"map_if\"  \"map_int\" \"map_lgl\" #> [11] \"map_raw\" #>  #> $imap #> [1] \"imap\"     \"imap_chr\" \"imap_dbl\" \"imap_dfc\" \"imap_dfr\" #> [6] \"imap_int\" \"imap_lgl\" \"imap_raw\" #>  #> $map #> [1] \"map2\"     \"map2_chr\" \"map2_dbl\" \"map2_df\"  \"map2_dfc\" #> [6] \"map2_dfr\" \"map2_int\" \"map2_lgl\" \"map2_raw\" #>  #> $pmap #> [1] \"pmap\"     \"pmap_chr\" \"pmap_dbl\" \"pmap_df\"  \"pmap_dfc\" #> [6] \"pmap_dfr\" \"pmap_int\" \"pmap_lgl\" \"pmap_raw\" #>  #> $lmap #> [1] \"lmap\"    \"lmap_at\" #>  #> $modify #> [1] \"modify\"    \"modify_at\" \"modify_if\" \"modify2\"   #> [5] \"imodify\"   #>  #> $walk #> [1] \"iwalk\" \"pwalk\" \"walk\"  \"walk2\" #>  #> $accumulate #> [1] \"accumulate\"  \"accumulate2\" #>  #> $reduce #> [1] \"reduce\"  \"reduce2\""},{"path":"https://timteafan.github.io/loopurrr/reference/loopurrr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"loopurrr: Tranlate purrr iterator functions to regular for loops — loopurrr-package","title":"loopurrr: Tranlate purrr iterator functions to regular for loops — loopurrr-package","text":"Translate purrr's iterator functions regular loops","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/loopurrr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"loopurrr: Tranlate purrr iterator functions to regular for loops — loopurrr-package","text":"Maintainer: Tim Tiefenbach mailme@tim-tiefenbach.de (ORCID)","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/output_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set output loopurrr's options — get_output_opt","title":"Get and set output loopurrr's options — get_output_opt","text":"get_output_opt() set_output_opt() get set loopurrr's output options. light wrappers around getOption(\"loopurrr.output\") options(\"loopurrr.output\"). default_context() inspects \"loopurrr.output\" option set. option specified, default c(\"rstudio\", \"clipboard\", \"console\"). \"console\" among output options automatically included last option.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/output_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set output loopurrr's options — get_output_opt","text":"","code":"get_output_opt(default = NULL)  set_output_opt(x = list(\"rstudio\", \"clipboard\", \"console\", NULL))  default_context()"},{"path":"https://timteafan.github.io/loopurrr/reference/output_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set output loopurrr's options — get_output_opt","text":"default specified option set options list, value returned. argument internal use . x Either NULL one several \"rstudio\", \"clipboard\", \"console\". set one option, output options run order left right successful.","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/output_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set output loopurrr's options — get_output_opt","text":"get_output_opt(), current value set option \"loopurrr.output\", default (defaults NULL) option unset. default_context(), either current value set option \"loopurrr.output\". case, \"console\" among options, automatically included last option. , option \"loopurrr.output\" specified c(\"rstudio\", \"clipboard\", \"console\").","code":""},{"path":"https://timteafan.github.io/loopurrr/reference/output_options.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set output loopurrr's options — get_output_opt","text":"","code":"set_output_opt(c(\"clipboard\", \"rstudio\"))  get_ouptut_opt() #> [1] \"clipboard\" \"rstudio\"  default_context() #> [1] \"clipboard\" \"rstudio\" \"console\""},{"path":"https://timteafan.github.io/loopurrr/news/index.html","id":"loopurrr-010","dir":"Changelog","previous_headings":"","what":"loopurrr 0.1.0","title":"loopurrr 0.1.0","text":"Initial release Core functionality provided as_loop()","code":""}]

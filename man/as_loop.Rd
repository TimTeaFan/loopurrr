% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_loop.R
\name{as_loop}
\alias{as_loop}
\title{Translate {purrr} iterative functions to regular for loops}
\usage{
as_loop(
  .expr,
  simplify = TRUE,
  output_nm = "out",
  idx = "i",
  output_context = default_context(),
  return = c("string", "eval")
)
}
\arguments{
\item{.expr}{A function call to a {purrr} iterator function. See the "Supported functions"
section below for an overview of which {purrr} iterator functions are currently supported.}

\item{simplify}{When TRUE, the default, \code{as_loop()} will run the function call in \code{.expr} to
check two things: (1) Whether the call is valid. If not, an error will be thrown, pointing out
that the underlying function call is invalid. (2) Whether the resulting return value contains
\code{NULL}. In this case the \code{for} loop needs to be more verbose. When \code{simplify} is set \code{FALSE}
the function call in \code{.expr} is not checked for errors and the resulting for loop will be more
verbose even if \code{NULL} is not among the return values. It is recommended to set \code{simplify} to
\code{FALSE} for calculation-heavy function calls.}

\item{output_nm}{sets the name of the resulting output object. The default name is \code{out}.}

\item{idx}{sets the name of the index of the for loop. The default index is \code{i}.}

\item{output_context}{An optional output context that defines the output target. Possible values
are one or several of:
\itemize{
\item \code{"rstudio"}: This will insert the translation to the location where \code{as_loop()} was run. If it
was run from within an R script, the for loop will be inserted there, otherwise in the console.
Note that the \code{{rstudioapi}} package is required for this option.
\item \code{"clipboard"}: This will copy the for loop translation to the clipboard. Note that the
\code{{clipr}} package is required for this option.
\item \code{"console"}: This will print the call to the console using \code{cat()}.
}

The default setting is to call \code{default_context()}. This function first looks at the
\code{"loopurrr.output"} option. If the option is not specified, then it will default to
\code{c("rstudio", "clipboard", "console")}. In this case \code{as_loop()} will run the output
options from left to right (starting with \code{"rstudio"}) until successful. If neither the
{rstudioapi} package nor the {clipr} package are installed, the output context will fall back
to \code{"console"}.}

\item{return}{When set to \code{"string"}, the default, \code{as_loop()} will return the translated code as
character strings to the location specified in \code{output_context}. When set to \code{"eval"}, the
translated code will be evaluated in a dedicated environment and the output object will be
returned. This option is especially for testing whether \code{as_loop()} works as expected. It should
be irrelevant for most users.}
}
\value{
Depending on the \code{return} argument the return value is:
\enumerate{
\item When \code{output = "string"}: \code{NULL}. As a side-effect, the translated for loop will be
returned to the specified output context.
\item When \code{output = "eval"}: Usually the return value of the output object that is constructed
with the for loop. In case of a call to \code{walk}, \code{walk2} etc. the (first) input object will be
returned.
}
}
\description{
\code{as_loop()} takes a function call to one of {purrr}'s iterator functions, such as \code{\link[purrr:map]{purrr::map()}},
and translates it into a regular \code{for} loop. Depending on the output context, the translation is
either (i) printed to the console, (ii) copied to the clipboard or (iii) directly inserted into
RStudio. Note that the latter two options require the \code{{clipr}} respectively the \code{{rstudioapi}}
package.

The usage is pretty straight-forward: Just wrap a call to a {purrr} iterator function into
\code{as_loop()} or us one of the pipe operators (\verb{|>} or \verb{\%>\%}) to pipe the function call into
\code{as_loop()}. For details see the examples below.
}
\section{Supported functions}{


The following iterator functions from the {purrr} package are currently supported:\if{html}{\out{<div class="r">}}\preformatted{options(width = 60)
get_supported_fns()
#> $map
#>  [1] "map"     "map_at"  "map_chr" "map_dbl" "map_df" 
#>  [6] "map_dfc" "map_dfr" "map_if"  "map_int" "map_lgl"
#> [11] "map_raw"
#> 
#> $imap
#> [1] "imap"     "imap_chr" "imap_dbl" "imap_dfc" "imap_dfr"
#> [6] "imap_int" "imap_lgl" "imap_raw"
#> 
#> $map
#> [1] "map2"     "map2_chr" "map2_dbl" "map2_df"  "map2_dfc"
#> [6] "map2_dfr" "map2_int" "map2_lgl" "map2_raw"
#> 
#> $pmap
#> [1] "pmap"     "pmap_chr" "pmap_dbl" "pmap_df"  "pmap_dfc"
#> [6] "pmap_dfr" "pmap_int" "pmap_lgl" "pmap_raw"
#> 
#> $lmap
#> [1] "lmap"    "lmap_at"
#> 
#> $modify
#> [1] "modify"    "modify_at" "modify_if" "modify2"  
#> [5] "imodify"  
#> 
#> $walk
#> [1] "iwalk" "pwalk" "walk"  "walk2"
#> 
#> $accumulate
#> [1] "accumulate"  "accumulate2"
#> 
#> $reduce
#> [1] "reduce"  "reduce2"
}\if{html}{\out{</div>}}
}

\section{Examples}{


If we wrap or pipe a call to \code{purrr::map()} into \code{as_loop()} it will be translated into a
regular for loop. Depending on the output context, the resulting for loop will either be
(i) inserted directly into a script in RStudio, (ii) copied to the clipboard or (iii)
printed to the console.\if{html}{\out{<div class="r">}}\preformatted{as_loop(map(1:3, sum))      # wrap a call in `as_loop`
map(1:3, sum) \%>\% as_loop() # pipe a call into `as_loop`

# --- convert: `map(1:3, sum)` as loop --- #
.inp1 <- 1:3
out <- vector("list", length = length(.inp1))

for (i in seq_along(.inp1)) \{
  out[[i]] <- sum(.inp1[[i]])
\}
# --- end loop --- #
}\if{html}{\out{</div>}}

The \code{output_nm} argument lets us specify the name of the resulting output object. In the
example below \code{".res"}. The \code{idx} argument lets us specify the index to be used. In the example
below \code{"j"}.\if{html}{\out{<div class="r">}}\preformatted{map_dbl(x, sum) \%>\%
  as_loop(., output_nm = ".res", idx = "j")

# --- convert: `map_dbl(x, sum)` as loop --- #
.res <- vector("double", length = length(x))

for (j in seq_along(x)) \{
  .res[[j]] <- sum(x[[j]])
\}
# --- end loop --- #
}\if{html}{\out{</div>}}

When \code{simplify} is set \code{FALSE} \code{as_loop} will neither check the validity of the underlying call
nor the expected output. In this case the resulting for loop is more verbose to account for the
case of \code{NULL} in the return values.\if{html}{\out{<div class="r">}}\preformatted{map(1:3, sum) \%>\% as_loop(., simplify = FALSE)

# --- convert: `map(1:3, sum)` as loop --- #
.inp1 <- 1:3
out <- vector("list", length = length(.inp1))

for (i in seq_along(.inp1)) \{
  .tmp <- sum(.inp1[[i]])
  if (!is.null(.tmp))
    out[[i]] <- .tmp
\}
# --- end loop --- #
}\if{html}{\out{</div>}}
}

